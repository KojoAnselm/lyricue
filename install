#!/usr/bin/env perl
# Will try to load all needed perl modules, fails if any not available
use Data::Dumper;
use strict;
use DBI;
use POSIX;
use IO::Socket::INET;
use Encode;
use Gtk2;
use Gtk2::GladeXML;
use Gtk2::Pango;
eval {require Gtk2::Spell};
if ($@) { debug( "Optional module Gtk2::Spell not available, please install for spell checking\n") };
eval {require Gtk2::TrayIcon};
if ($@) { debug( "Optional module Gtk2::TrayIcon not available, please install for Tray Icon\n") };
eval {require Gnome2::Canvas};
if ($@) { debug( "Optional module Gnome2::Canvas not available, please install for Fullserver\n") };
use Getopt::Std;
use Glib;

my $prefix="";
my $install_db = 1;
my $install_files = 1;
my $dbpass = "";
my $dbuser = "root";
my $adminuser = "";
my $quiet = 0;
my %opts;

getopts('f:dqu:p:a:h', \%opts);
if (defined $opts{h}) {
	debug( "Usage: install [-h] [-f PREFIX] [-d] [-q] [-u DBUSER] [-p DBPASS] [-a ADMINUSER]\n");
	exit(1);
}
if (defined $opts{f}) {
	$prefix=$opts{f};
	$install_db = 0;
}
if (defined $opts{a}) {
	$adminuser = $opts{a};
}
if (defined $opts{d}) {
	$install_files = 0;
}
if (defined $opts{u}) {
	$dbuser = $opts{u};
}
if (defined $opts{p}) {
	$dbpass = $opts{p};
}
if (defined $opts{q}) {
    $quiet = 1;
}


debug( "Lyric Display System\n");
debug( "--------------------\n");
debug( "This script will check that the nessecary items are installed\n");
debug( "then install the files and create the MySql tables nessecary\n");

my $bindir   = $prefix."/usr/bin/";
my $etcdir   = $prefix."/etc/lyricue/";
my $sharedir = $prefix."/usr/share/lyricue/";
my $desktopdir = $prefix."/usr/share/applications/";
my $ldssharedir = $prefix."/usr/share/lds/";
my $ldsetcdir = $prefix."/etc/lds/";
my $docdir = $prefix."/usr/share/doc/lyricue/";
my $localedir = $prefix."/usr/share/locale/";
my @parentdirs = ($prefix."/etc",$prefix."/usr", $prefix."/usr/share", $prefix."/usr/share/doc", $prefix."/usr/share/locale");

my %replace = ( $sharedir."lyricue.png" => 0644,
		$sharedir."lyricue-icon.png" => 0644,
		$sharedir."lyricue.glade" => 0644,
		$bindir."lyricue" => 0644,
		$bindir."lyricue_remote" => 0644,
		$bindir."lyricue_server" =>0644,
		$bindir."lyricue_preview" =>0644,
		$desktopdir."lyricue.desktop" => 0644,
		$desktopdir."lyricue_server.desktop" => 0644
		);

my %addonly = (	$etcdir."access.conf" => 0644,
		$etcdir."default.conf" => 0644
		);

if ($ARGV[0] eq "-u") {
	debug( "Uninstalling Lyricue\n");
	debug( "--------------------\n\n");
	debug( "Do you want to remove global images/backgrounds? (y/N):");
	my $globals = <STDIN>;
	chomp ($globals);
	debug( "\nDo you want to remove the databases? (y/N):");
	my $database = <STDIN>;
	chomp($database);
	if (uc($database) eq "Y") {
		if ($dbpass eq "") {
			debug( "Please enter the password for your ".$dbuser." mysql user: ");
			$dbpass=<STDIN>;
			chomp $dbpass;
		}
	}
	debug( "\n\nAbout to delete Lyricue\n");
	debug( "\nAre you SURE? (y/N):");
	my $confirm = <STDIN>;
	chomp ($confirm);
	if (uc($confirm) ne "Y") {
		debug( "\n\nCancelled ... Exiting\n");
		exit;
	}
	debug( "Removing executables\n");
	system ("rm $bindir/lyricue $bindir/lyricue_server $bindir/lyricue_remote $bindir/lyricue_preview");
	debug( "Removing most files in share directory\n");
	system ("rm $sharedir/*");
	debug( "Removing Documentation\n");
	system ("rm -rf $docdir");
	debug( "Removing System Settings\n");
	system ("rm -rf $etcdir");
	if (uc($globals) eq "Y") {
		debug( "Removing entire lyricue share directory\n");
		system("rm -rf $sharedir");
	}
	if (uc($database) eq "Y") {
		debug( "Removing Databases\n");
		system ("echo 'DROP DATABASE lyricDb' | mysql -u $dbuser --password=$dbpass");
		system("echo 'DROP DATABASE bibleDb' | mysql -u $dbuser --password=$dbpass");
		system("echo 'DROP DATABASE mediaDb' | mysql -u $dbuser --password=$dbpass");
		debug( "Removing Lyric user from the database\n");
		system ("echo \"DELETE FROM user WHERE User='lyric';\"| mysql -u$dbuser --password=$dbpass mysql");

		system("mysqladmin -u$dbuser --password=$dbpass reload");
	}
	debug( "\n\nUninstalled\n");
} else {
	if ( -d $ldssharedir ) {
		system("mv $ldssharedir $sharedir");
		system("ln -s $sharedir $ldssharedir");
	}
	if ( -d $ldsetcdir ) {
		system("mv $ldsetcdir $etcdir");
		system("ln -s $etcdir $ldsetcdir");
	}

	if ($install_files) {
		debug( "Creating directories:\n");
		foreach my $dir (@parentdirs, $bindir,$etcdir,$sharedir,$docdir, $desktopdir) {
			debug( "dir -> ".$dir."\n");
			mkdir $dir,0755;
		}
	
		debug( "\nCopying files:\n");
		foreach my $file (keys %replace) {
			debug( "file -> ".$file."\n");
			my $basename = $file;
			$basename =~ s/^.*\///g;
            if ($basename =~ /png$/ ) {
                $basename = "images/".$basename;
            }
			system ("cp ".$basename." ".$file);
		}
	
		foreach my $file (keys %addonly) {
			if ( ! -e $file ) {
				debug( "file -> ".$file."\n");
				my $basename = $file;
				$basename =~ s/^.*\///g;
				system ("cp ".$basename." ".$file);
			}
		}
		
		my @docs;
		opendir (DIR, "docs" );
		@docs = readdir(DIR);
		closedir (DIR);
		foreach (@docs) {
			if (! /^\./ ) {
				debug( "doc -> ".$_."\n");
				system ("cp docs/".$_." ".$docdir);
			}
		}
		
		my @locales;
		opendir (DIR, "po");
		@locales = readdir(DIR);
		closedir (DIR);
		foreach (@locales) {
	    	if (! /^\./ ) {
                if (/\.po$/ ) {
		     	    my $locale=$_;
		    	    $locale =~ s/\.po$//g;
		    	    my $locdir = $localedir.$locale."/LC_MESSAGES";
		    	    mkdir $localedir.$locale;
		    	    mkdir $locdir;
		    	    debug( "translation -> ".$locdir."\n");
		    	    system ("msgfmt po/".$locale.".po -o ".$locdir."/lyricue.mo");
                }
			}
		}
	}
	if ($install_db) {
		my @ary = DBI->available_drivers(1);
		my $mysql = 0;
		foreach ( @ary ) {
	 		if ($_ eq "mysql") {
	 			$mysql = 1;
			}
		}
		if (! $mysql ) {
			die ("The Perl module DBI::mysql is not installed, please install");
		}
	
		if (@ary == 0 ) {
			die "Mysql doesn't appear to be running, please restart it\n";
		}
		if ( $dbpass eq "") {
			debug( "Please enter the password for your $dbuser mysql user: ");
			my $dbpass=<STDIN>;
			chomp $dbpass;
		}
		
		my $dbh = DBI->connect("DBI:mysql:mysql:localhost", "$dbuser","$dbpass");
		my $sth = $dbh->prepare ("select * from user where User='lyric'");
		my $rv = $sth->execute;
		if ($sth->rows) {
			debug( "User already setup\n");
		} else {
			debug( "Creating mysql user..");
			$sth = $dbh->prepare ("insert into user set Host='%',User='lyric',Password='',Select_priv='Y',Insert_priv='Y', Update_priv='Y',Delete_priv='Y'");
			$sth->execute;
			$sth = $dbh->prepare ("insert into user set Host='localhost',User='lyric',Password='',Select_priv='Y',Insert_priv='Y', Update_priv='Y',Delete_priv='Y'");
			$sth->execute;
			debug( "Done\n");
		}
	
		debug( "Checking for existing Databases:\n");
		my @ary = DBI->data_sources("mysql");
		my $lyricdb = 0;
		my $bibledb = 0;
		my $mediadb = 0;
		foreach ( @ary ) {
			if (/lyricDb/) {
				debug( "Found lyricDb\n");
				$lyricdb = 1;
			} elsif (/bibleDb/) {
				debug( "Found bibleDb\n");
				$bibledb = 1;
			} elsif (/mediaDb/) {
		    		debug( "Found mediaDb\n");
				$mediadb = 1;
			}
		}
		
		if (! $lyricdb) {
	    		debug( "Creating lyricDb\n");
			system ("cat mysql/MySQL_create_Table.sql | mysql -u $dbuser --password=$dbpass");
		} else {
			my $dbh2 = DBI->connect("DBI:mysql:lyricDb", "$dbuser","$dbpass");
			my $tables = $dbh2->selectall_arrayref("show tables");
			my %table;
			foreach (@$tables) {
				%table->{$_->[0]} = 1;
			}
			if (! defined %table->{'associations'}) {
				debug( "Associations table not found\n");
				debug( "Upgrading database from < 1.2 to 1.2\n");
				system ("cat mysql/Update_1.2.sql | mysql -u $dbuser --password=$dbpass");
				debug( "Done\n");
			}
		
			my $fields = $dbh2->selectall_arrayref("describe playlist");
			my %trans;
			foreach (@$fields) {
				%trans->{$_->[0]} = 1;
			}
			if (! defined %trans->{'transition'}) {
				debug( "Transition field not found\n");
				debug( "Upgrading database from 1.2 to 1.9\n");
				system ("cat mysql/Update_1.9.sql | mysql -u $dbuser --password=$dbpass");
				debug( "Done\n");
			}
	
		}
		
		if ((! $bibledb) && (-e "mysql/MySQL_create_bible_KJV.sql" )){
	    		debug( "Creating bibleDb\n");
			system ("cat mysql/MySQL_create_bible_KJV.sql | mysql -u $dbuser --password=$dbpass");
		}
	
		if (! $mediadb) {
	    		debug( "Creating media database\n");
	    		system ("cat mysql/MySQL_create_media.sql | mysql -u $dbuser --password=$dbpass");
		}
	
		system("mysqladmin -u$dbuser --password=$dbpass reload");
	
		if (! $mediadb) {
			debug( "Importing existing backgrounds/images\n");
			system ("./import_media img $sharedir/images");
			system ("./import_media bg $sharedir/backgrounds");
			debug( "Done\n");
		}
	}
	
	if ($install_files) {
		if ($adminuser eq "") {
			debug( "Please enter the user that you will be administering Lyricue from: ");
			$adminuser=<STDIN>;
			chomp $adminuser;
		}
		open (ACCESS, $etcdir."access.conf");
		open (OUT, ">".$etcdir."access.conf.tmp");
		while (<ACCESS>) {
			if (! /^$adminuser/) {
				print OUT $_;
			}
		}
		print OUT $adminuser." = spade\n";
		close OUT;
		close ACCESS;
		system ("mv ".$etcdir."access.conf.tmp ".$etcdir."access.conf");
		
		debug( "\n\n");
	}
	debug( "Finished installing Lyricue\n\n");
	debug( "Run /usr/bin/lyricue_server on one screen\n");
	debug( "and load up /usr/bin/lyricue on the other\n");
}

sub debug {
    my $text = shift;   
    if ($quiet == 0) {
        print $text;
    }
}
